const processVideo = async (chatId: number, text: string, messageId: number) => {
    const timestamp = Date.now();
    const videoFilePath = path.join(__dirname, `video_${chatId}_${timestamp}.mp4`);
    try {
        const downloadPrompt = await bot.sendMessage(chatId, 'Do you want to download the video?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'Yes', callback_data: 'download_yes' },
                        { text: 'No', callback_data: 'download_no' }
                    ]
                ]
            },
            disable_notification: true
        });

        bot.on('callback_query', async (query) => {
            const { data, message, from } = query;

            if (message?.chat.id === chatId) {
                if (data === 'download_yes') {
                    const waitingMessage = await bot.sendMessage(chatId, 'Video is being downloaded, please wait...', 
                        {disable_notification: true, reply_to_message_id: messageId});

                    await downloadVideo(text, videoFilePath);

                    const fileStats = fs.statSync(videoFilePath);
                    if (fileStats.size > MAX_FILE_SIZE) {
                        console.log('Error: File size exceeds 50MB.');
                        await bot.editMessageText('Error: The video file is too large to send via Telegram (over 50MB).', {
                            chat_id: chatId,
                            message_id: waitingMessage.message_id,
                        });
                        return;
                    }

                    await bot.deleteMessage(chatId, downloadPrompt.message_id);
                    await bot.deleteMessage(chatId, waitingMessage.message_id);
                    await bot.sendVideo(chatId, videoFilePath, {disable_notification: true, reply_to_message_id: messageId});
                } else if (data === 'download_no') {
                    await bot.deleteMessage(chatId, downloadPrompt.message_id);
                }
            }

            await bot.answerCallbackQuery(query.id);
        });
    } catch (error) {
        console.error('Error while processing the video:', error);
        bot.sendMessage(chatId, 'An error occurred while processing your request. Please try again later.', {
            disable_notification: true
        });
    } finally {
        if (fs.existsSync(videoFilePath)) {
            fs.unlinkSync(videoFilePath);
        }
    }
};
